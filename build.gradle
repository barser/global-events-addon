
buildscript {
    ext.cubaVersion = '6.8.0'
    repositories {
        
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
            }
        }
        
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
    }
}

def modulePrefix = 'cubaglevt'

def globalModule = project(":${modulePrefix}-global")
def coreModule = project(":${modulePrefix}-core")
def webModule = project(":${modulePrefix}-web")
def sharedLibModule = project(":${modulePrefix}-shared-lib")
def desktopModule = project(":${modulePrefix}-desktop")
def portalModule = project(":${modulePrefix}-portal")

def servletApi = 'org.apache.tomcat:tomcat-servlet-api:8.0.26'

configurations {
    bom
}
dependencies {
    bom("com.haulmont.cuba:cuba-global:$cubaVersion")
}

apply(plugin: 'idea')
apply(plugin: 'cuba')

cuba {
    artifact {
        group = 'com.haulmont.addon.globalevents'
        version = "0.1.2"
        isSnapshot = false
    }
    tomcat {
        dir = "$project.rootDir/deploy/tomcat"
    }
    ide {
        vcs = 'Git'
        copyright = '''Copyright (c) 2008-2018 Haulmont.
 
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
 
     http://www.apache.org/licenses/LICENSE-2.0
 
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.'''
    }
}

dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")

}

def hsql = 'org.hsqldb:hsqldb:2.2.9'

configure([globalModule, coreModule, webModule, sharedLibModule, desktopModule, portalModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'idea')
    apply(plugin: 'cuba')

    dependencies {
        testCompile('junit:junit:4.12')
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
}

configure(globalModule) {

    dependencies {
        compile('org.springframework:spring-websocket:' + bom.getVersion('org.springframework', 'spring-core'))
    }

    task enhance(type: CubaEnhancing)

    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : ''))
        }
    }

    
}

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        compile(sharedLibModule)
        provided(servletApi)
        jdbc(hsql)
        testRuntime(hsql)
        compile(bom['com.fasterxml.jackson.core:jackson-databind'])
    }

    task cleanConf(description: 'Cleans up conf directory') {
        doLast {
            def dir = new File(cuba.tomcat.dir, "/conf/${modulePrefix}-core")
            if (dir.isDirectory()) {
                ant.delete(includeemptydirs: true) {
                    fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
                }
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}-core"
        appJars(modulePrefix + '-global', modulePrefix + '-core')
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'hsql'
        host = 'localhost'
        dbName = 'cubaglevt'
        dbUser = 'sa'
        dbPassword = ''
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'hsql'
        host = 'localhost'
        dbName = 'cubaglevt'
        dbUser = 'sa'
        dbPassword = ''
    }
}
    
configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        provided(servletApi)
        compile(globalModule)
        compile(sharedLibModule)
    }
    
    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/haulmont/addon/globalevents/**"
        into "$cuba.tomcat.dir/conf/${modulePrefix}"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = "${modulePrefix}"
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory') {
        doLast {
            def dir = new File(cuba.tomcat.dir, "/conf/${modulePrefix}")
            if (dir.isDirectory()) {
                ant.delete(includeemptydirs: true) {
                    fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
                }
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}"
        appJars(modulePrefix + '-global', modulePrefix + '-web')
    }
}

configure(desktopModule) {
    dependencies {
        compile(globalModule)
        compile(bom['com.fasterxml.jackson.core:jackson-databind'])
        runtime('org.glassfish.tyrus.bundles:tyrus-standalone-client-jdk:1.13.1')
    }
    assemble.dependsOn = [ classes ]
}

configure(portalModule) {
    dependencies {
        provided(servletApi)
        compile(globalModule)
        compile(sharedLibModule)
    }

    def webappName = "${modulePrefix}-portal"
    def resourcesDir = "$cuba.tomcat.dir/webapps/$webappName/resources"
    def ftlDir = "$cuba.tomcat.dir/webapps/$webappName/WEB-INF/templates"

    task deploy(dependsOn: assemble, type: CubaDeployment) {
        appName = webappName
        appJars(modulePrefix + '-global', modulePrefix + '-portal')
    }

    task deployStatic() {
        doLast {
            copy {
                from file('web/resources')
                include '**/*.css'
                include '**/*.js'
                include '**/*.png'
                include '**/*.gif'
                include '**/*.jpg'
                into resourcesDir
            }
            copy {
                from file('web/WEB-INF/templates')
                include '**/*.ftl'
                into ftlDir
            }
        }
    }

    task cleanStatic() {
        doLast {
            delete resourcesDir
            delete ftlDir
        }
    }

    task webArchive(type: Zip) {
        from file('web')
        from file("$buildDir/web")
        exclude '**/web.xml', '**/app.properties'
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }
}





task undeploy(type: Delete, dependsOn: ":${modulePrefix}-web:cleanConf") {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}-core")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}-webstart")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}-portal")
}

task restart(dependsOn: ['stop', ":${modulePrefix}-core:deploy", ":${modulePrefix}-web:deploy", ":${modulePrefix}-portal:deploy"], description: 'Redeploys applications and restarts local Tomcat') {
    doLast {
        ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            not {
                socket(server: 'localhost', port: '8787')
            }
        }
        start.execute()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
}
